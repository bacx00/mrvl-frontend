"use strict";(self.webpackChunkmrvl_frontend=self.webpackChunkmrvl_frontend||[]).push([[784],{784:(e,t,n)=>{n.d(t,{default:()=>b});var o=n(555);const c="https://staging.mrvl.net",s="disconnected",a="connecting",i="connected",r="reconnecting",l="failed",h="websocket",d="sse",m="polling";const p=new class{constructor(){this.connections=new Map,this.subscribers=new Map,this.reconnectAttempts=new Map,this.maxReconnectAttempts=10,this.baseReconnectDelay=1e3,this.maxReconnectDelay=3e4,this.heartbeatInterval=25e3,this.connectionTimeout=15e3,this.handleVisibilityChange=this.handleVisibilityChange.bind(this),this.handleOnline=this.handleOnline.bind(this),this.handleOffline=this.handleOffline.bind(this),this.setupGlobalListeners(),console.log("\ud83d\ude80 LiveUpdateService initialized - Professional real-time connections ready")}setupGlobalListeners(){"undefined"!==typeof window&&(document.addEventListener("visibilitychange",this.handleVisibilityChange),window.addEventListener("online",this.handleOnline),window.addEventListener("offline",this.handleOffline),window.addEventListener("beforeunload",(()=>{this.disconnectAll()})))}async connectToMatch(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};const c="match_".concat(e);if(this.connections.has(c))return console.log("\u26a1 Already connected to match ".concat(e)),void this.addSubscriber(c,t);const s={matchId:e,connectionKey:c,state:a,transport:null,lastUpdate:Date.now(),options:(0,o.A)({preferredTransport:n.transport||d,enableHeartbeat:!1!==n.heartbeat,enableReconnect:!1!==n.reconnect},n),healthCheck:{lastPing:0,lastPong:0,missedHeartbeats:0}};this.connections.set(c,s),this.addSubscriber(c,t);try{await this.establishConnection(s)}catch(i){console.error("\u274c Failed to connect to match ".concat(e,":"),i),this.handleConnectionError(s,i)}}async establishConnection(e){const{matchId:t,options:n}=e,o=[d,h,m];for(const s of o)if(!(n.preferredTransport&&n.preferredTransport!==s&&o.indexOf(n.preferredTransport)<o.indexOf(s)))try{switch(console.log("\ud83d\udd0c Attempting ".concat(s.toUpperCase()," connection for match ").concat(t)),s){case d:await this.connectSSE(e);break;case h:await this.connectWebSocket(e);break;case m:await this.connectPolling(e)}return e.transport=s,e.state=i,console.log("\u2705 Successfully connected to match ".concat(t," via ").concat(s.toUpperCase())),this.reconnectAttempts.set(e.connectionKey,0),void(n.enableHeartbeat&&this.startHeartbeat(e))}catch(c){console.error("\u274c ".concat(s.toUpperCase()," connection failed for match ").concat(t,":"),c),this.closeConnection(e,!1)}throw new Error("All transport methods failed for match ".concat(t))}async connectSSE(e){return new Promise(((t,n)=>{const{matchId:o,options:s}=e,a="".concat(c,"/api/live-updates/stream/").concat(o),i=new EventSource(a,{withCredentials:!0});let r=setTimeout((()=>{n(new Error("SSE connection timeout"))}),this.connectionTimeout);i.onopen=()=>{clearTimeout(r),console.log("\ud83d\udce1 SSE connection established for match ".concat(o)),t()},i.onmessage=t=>{this.handleMessage(e,t.data)};["score-update","hero-update","stats-update","map-update","status-update","connected"].forEach((t=>{i.addEventListener(t,(n=>{this.handleMessage(e,n.data,t)}))})),i.onerror=e=>{clearTimeout(r),console.error("\u274c SSE error for match ".concat(o,":"),e),n(e)},e.transport_connection=i}))}async connectWebSocket(e){return new Promise(((t,n)=>{const{matchId:o}=e,s="".concat(c.replace("http","ws"),"/ws/match/").concat(o),a=new WebSocket(s);let r=setTimeout((()=>{n(new Error("WebSocket connection timeout"))}),this.connectionTimeout);a.onopen=()=>{clearTimeout(r),console.log("\ud83d\udd0c WebSocket connection established for match ".concat(o)),a.send(JSON.stringify({type:"subscribe",match_id:o,channels:["scores","heroes","stats"]})),t()},a.onmessage=t=>{this.handleMessage(e,t.data)},a.onerror=e=>{clearTimeout(r),console.error("\u274c WebSocket error for match ".concat(o,":"),e),n(e)},a.onclose=t=>{e.state===i&&(console.log("\ud83d\udd0c WebSocket closed for match ".concat(o,", attempting reconnect")),this.scheduleReconnect(e))},e.transport_connection=a}))}async connectPolling(e){const{matchId:t}=e;console.log("\u23f0 Starting polling connection for match ".concat(t));const n=setInterval((async()=>{if(e.state!==s)try{const n=await fetch("".concat(c,"/api/live-updates/status/").concat(t),{method:"GET",headers:{Accept:"application/json","Content-Type":"application/json"},signal:AbortSignal.timeout(5e3)});if(n.ok){const t=await n.json();this.handleMessage(e,JSON.stringify(t))}}catch(o){console.error("\u274c Polling error for match ".concat(t,":"),o),this.handleConnectionError(e,o)}else clearInterval(n)}),1e3);return e.transport_connection=n,e.state=i,Promise.resolve()}handleMessage(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;try{let c;if(e.lastUpdate=Date.now(),e.healthCheck.lastPong=Date.now(),"string"===typeof t){if(""===t.trim()||t.startsWith(":"))return;c=JSON.parse(t)}else c=t;if("connected"===c.status)return void console.log("\u2705 Connection confirmed for match ".concat(e.matchId));const s=(0,o.A)((0,o.A)({},c),{},{matchId:e.matchId,timestamp:Date.now(),transport:e.transport,eventType:n||c.type||"update"});this.notifySubscribers(e.connectionKey,s)}catch(c){console.error("\u274c Error handling message:",c,t)}}addSubscriber(e,t){this.subscribers.has(e)||this.subscribers.set(e,new Set),this.subscribers.get(e).add(t)}removeSubscriber(e,t){const n=this.subscribers.get(e);if(n&&(n.delete(t),0===n.size)){this.subscribers.delete(e);const t=this.connections.get(e);t&&this.closeConnection(t)}}notifySubscribers(e,t){const n=this.subscribers.get(e);n&&n.forEach((e=>{try{e(t)}catch(n){console.error("\u274c Error in subscriber callback:",n)}}))}startHeartbeat(e){e.heartbeatTimer&&clearInterval(e.heartbeatTimer),e.heartbeatTimer=setInterval((()=>{const t=Date.now();t-e.lastUpdate>2*this.heartbeatInterval&&(console.log("\ud83d\udc94 Heartbeat timeout for match ".concat(e.matchId,", reconnecting")),e.healthCheck.missedHeartbeats++,e.healthCheck.missedHeartbeats>=3&&this.scheduleReconnect(e)),e.transport===h&&e.transport_connection.readyState===WebSocket.OPEN&&(e.transport_connection.send(JSON.stringify({type:"ping"})),e.healthCheck.lastPing=t)}),this.heartbeatInterval)}scheduleReconnect(e){if(!e.options.enableReconnect||e.state===r)return;const t=this.reconnectAttempts.get(e.connectionKey)||0;if(t>=this.maxReconnectAttempts)return console.error("\u274c Max reconnection attempts reached for match ".concat(e.matchId)),e.state=l,void this.notifySubscribers(e.connectionKey,{type:"connection_failed",matchId:e.matchId,message:"Maximum reconnection attempts exceeded"});e.state=r,this.reconnectAttempts.set(e.connectionKey,t+1);const n=Math.min(this.baseReconnectDelay*Math.pow(2,t),this.maxReconnectDelay);console.log("\ud83d\udd04 Scheduling reconnect for match ".concat(e.matchId," in ").concat(n,"ms (attempt ").concat(t+1,")")),setTimeout((async()=>{try{this.closeConnection(e,!1),await this.establishConnection(e)}catch(t){console.error("\u274c Reconnection failed for match ".concat(e.matchId,":"),t),this.scheduleReconnect(e)}}),n)}handleConnectionError(e,t){console.error("\u274c Connection error for match ".concat(e.matchId,":"),t),e.state=l,this.notifySubscribers(e.connectionKey,{type:"connection_error",matchId:e.matchId,error:t.message,timestamp:Date.now()}),e.options.enableReconnect&&this.scheduleReconnect(e)}closeConnection(e){let t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];if(e.heartbeatTimer&&(clearInterval(e.heartbeatTimer),e.heartbeatTimer=null),e.transport_connection){try{switch(e.transport){case d:case h:e.transport_connection.close();break;case m:clearInterval(e.transport_connection)}}catch(n){console.error("Error closing transport connection:",n)}e.transport_connection=null}e.state=s,t&&(this.connections.delete(e.connectionKey),this.subscribers.delete(e.connectionKey),this.reconnectAttempts.delete(e.connectionKey))}disconnectFromMatch(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;const n="match_".concat(e);if(t)this.removeSubscriber(n,t);else{const e=this.connections.get(n);e&&this.closeConnection(e)}}disconnectAll(){console.log("\ud83d\udd0c Disconnecting all live update connections"),this.connections.forEach((e=>{this.closeConnection(e,!1)})),this.connections.clear(),this.subscribers.clear(),this.reconnectAttempts.clear()}handleVisibilityChange(){document.hidden?console.log("\ud83d\udcf1 Page hidden - reducing update frequency"):(console.log("\ud83d\udcf1 Page visible - resuming normal updates"),this.connections.forEach((e=>{e.state===l&&this.scheduleReconnect(e)})))}handleOnline(){console.log("\ud83c\udf10 Network back online - attempting to reconnect"),this.connections.forEach((e=>{e.state===l&&this.scheduleReconnect(e)}))}handleOffline(){console.log("\ud83c\udf10 Network offline - connections will attempt to reconnect when online")}getConnectionStatus(e){const t="match_".concat(e),n=this.connections.get(t);return n?{status:n.state,transport:n.transport,lastUpdate:n.lastUpdate,reconnectAttempts:this.reconnectAttempts.get(t)||0,healthCheck:n.healthCheck}:{status:s}}forceReconnect(e){const t="match_".concat(e),n=this.connections.get(t);n&&(console.log("\ud83d\udd04 Forcing reconnection for match ".concat(e)),this.scheduleReconnect(n))}getDebugInfo(){const e={};return this.connections.forEach(((t,n)=>{var o;e[n]={state:t.state,transport:t.transport,lastUpdate:t.lastUpdate,reconnectAttempts:this.reconnectAttempts.get(n)||0,subscriberCount:(null===(o=this.subscribers.get(n))||void 0===o?void 0:o.size)||0}})),{totalConnections:this.connections.size,connections:e,totalSubscribers:Array.from(this.subscribers.values()).reduce(((e,t)=>e+t.size),0)}}cleanup(){this.disconnectAll(),"undefined"!==typeof window&&(document.removeEventListener("visibilitychange",this.handleVisibilityChange),window.removeEventListener("online",this.handleOnline),window.removeEventListener("offline",this.handleOffline)),console.log("\ud83e\uddf9 LiveUpdateService cleaned up")}},b=p;"undefined"!==typeof window&&(window.liveUpdateService=p)}}]);