;
function SwissDoubleElimBracket({ eventId, event, navigateTo, isAdmin, onMatchUpdate }) {;
  const [activeTab, setActiveTab] = useState('swiss'); // swiss, bracket, progression;
;
  // Fetch bracket data;
  useEffect(() => {;
;
    // Subscribe to real-time updates;
    const channel = subscribeEventUpdates(eventId.toString(), (data) => {;
      if (data.type === 'match-updated' || data.type === 'bracket-updated') {;
      };
;
    return () => {;
      if (channel) {;
      };
;
  const fetchBracketData = async () => {;
    try {;
      ;
      if (data.success) {;
        ;
        // Auto-switch to bracket tab if Swiss is complete;
        if (data.data.bracket?.stages?.swiss?.standings) {;
          const swissComplete = data.data.bracket.stages.swiss.standings;
          if (swissComplete && activeTab === 'swiss') {;
          };
        };
      } else {;
      };
    } catch (err) {;
    } finally {;
    };
;
  const handleZoom = (delta) => {;
;
  const toggleFullscreen = () => {;
    if (!document.fullscreenElement) {;
    } else {;
    };
;
  if (loading) {;
    return (;
      <div className="flex items-center justify-center h-96">;
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-red-600"></div>;
      </div>;
  };
;
  if (error) {;
    return (;
      <div className="text-center py-12">;
        <div className="text-red-600 dark:text-red-400">{error}</div>;
      </div>;
  };
;
  if (!bracketData?.bracket) {;
    return (;
      <div className="text-center py-12">;
        <div className="text-gray-500 dark:text-gray-400">No bracket data available</div>;
      </div>;
  };
;
;
  return (;
    <div ref={containerRef} className={`vlr-bracket-container ${isFullscreen ? 'fullscreen' : ''}`}>;
      {/* Header Controls */};
      <div className="bracket-header sticky top-0 z-20 bg-white dark:bg-gray-900 border-b dark:border-gray-700">;
        <div className="flex items-center justify-between p-4">;
          <div className="flex items-center space-x-6">;
            <h2 className="text-xl font-bold text-gray-900 dark:text-white">;
              {event?.name} Bracket;
            </h2>;
            ;
            {/* Tab Navigation */};
            {isSwissDoubleElim && (;
              <div className="flex space-x-1 bg-gray-100 dark:bg-gray-800 rounded-lg p-1">;
                <button;
                  onClick={() => setActiveTab('swiss')};
                  className={`px-4 py-2 rounded-md text-sm font-medium transition-colors ${;
                    activeTab === 'swiss';
                      ? 'bg-white dark:bg-gray-700 text-gray-900 dark:text-white shadow';
                      : 'text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-white';
                  }`};
                >;
                  Swiss Stage;
                </button>;
                <button;
                  onClick={() => setActiveTab('bracket')};
                  className={`px-4 py-2 rounded-md text-sm font-medium transition-colors ${;
                    activeTab === 'bracket';
                      ? 'bg-white dark:bg-gray-700 text-gray-900 dark:text-white shadow';
                      : 'text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-white';
                  }`};
                >;
                  Playoffs;
                </button>;
                <button;
                  onClick={() => setActiveTab('progression')};
                  className={`px-4 py-2 rounded-md text-sm font-medium transition-colors ${;
                    activeTab === 'progression';
                      ? 'bg-white dark:bg-gray-700 text-gray-900 dark:text-white shadow';
                      : 'text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-white';
                  }`};
                >;
                  Progression;
                </button>;
              </div>;
            )};
          </div>;
;
          {/* Zoom Controls */};
          <div className="flex items-center space-x-4">;
            <div className="flex items-center space-x-2">;
              <button;
                onClick={() => handleZoom(-0.1)};
                className="p-2 hover:bg-gray-100 dark:hover:bg-gray-800 rounded";
                title="Zoom Out (-)">;
                <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">;
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0zM13 10H7" />;
                </svg>;
              </button>;
              <span className="text-sm text-gray-600 dark:text-gray-400 min-w-[50px] text-center">;
                {Math.round(zoom * 100)}%;
              </span>;
              <button;
                onClick={() => handleZoom(0.1)};
                className="p-2 hover:bg-gray-100 dark:hover:bg-gray-800 rounded";
                title="Zoom In (+)">;
                <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">;
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0zM10 7v6m3-3H7" />;
                </svg>;
              </button>;
            </div>;
            ;
            <button;
              onClick={toggleFullscreen};
              className="p-2 hover:bg-gray-100 dark:hover:bg-gray-800 rounded";
              title="Fullscreen (F)">;
              <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">;
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 8V4m0 0h4M4 4l5 5m11-5h-4m4 0v4m0-4l-5 5M4 16v4m0 0h4m-4 0l5-5m11 5h-4m4 0v-4m0 4l-5-5" />;
              </svg>;
            </button>;
          </div>;
        </div>;
      </div>;
;
      {/* Content */};
      <div className="bracket-content">;
        {isSwissDoubleElim ? (;
          <>;
            {activeTab === 'swiss' && (;
              <SwissStage ;
                swissData={bracket.stages.swiss};
                eventId={eventId};
                isAdmin={isAdmin};
                onMatchUpdate={onMatchUpdate};
                navigateTo={navigateTo};
                zoom={zoom};
              />;
            )};
            {activeTab === 'bracket' && (;
              <PlayoffBracket ;
                playoffData={bracket.stages.playoffs};
                eventId={eventId};
                isAdmin={isAdmin};
                onMatchUpdate={onMatchUpdate};
                navigateTo={navigateTo};
                zoom={zoom};
                hoveredMatch={hoveredMatch};
                setHoveredMatch={setHoveredMatch};
              />;
            )};
            {activeTab === 'progression' && (;
              <TeamProgression ;
                eventId={eventId};
                navigateTo={navigateTo};
              />;
            )};
          </>;
        ) : (;
          // Standard bracket display;
          <div>Standard bracket format not yet implemented</div>;
        )};
      </div>;
    </div>;
};
;
// Swiss Stage Component;
function SwissStage({ swissData, eventId, isAdmin, onMatchUpdate, navigateTo, zoom }) {;
;
;
  return (;
    <div className="swiss-stage p-6" style={{ transform: `scale(${zoom})`, transformOrigin: 'top left' }}>;
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">;
        {/* Standings */};
        <div className="swiss-standings">;
          <h3 className="text-lg font-bold mb-4 text-gray-900 dark:text-white">Swiss Standings</h3>;
          <div className="bg-white dark:bg-gray-800 rounded-lg shadow overflow-hidden">;
            <table className="w-full">;
              <thead className="bg-gray-50 dark:bg-gray-700">;
                <tr>;
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">;
                    Rank;
                  </th>;
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">;
                    Team;
                  </th>;
                  <th className="px-4 py-3 text-center text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">;
                    W-L;
                  </th>;
                  <th className="px-4 py-3 text-center text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">;
                    Map Diff;
                  </th>;
                  <th className="px-4 py-3 text-center text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">;
                    Buchholz;
                  </th>;
                  <th className="px-4 py-3 text-center text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">;
                    Qual;
                  </th>;
                </tr>;
              </thead>;
              <tbody className="divide-y divide-gray-200 dark:divide-gray-700">;
                {standings?.map((team) => (;
                  <tr ;
                    key={team.id};
                    className={`hover:bg-gray-50 dark:hover:bg-gray-700 cursor-pointer ${;
                      team.qualified_to_upper ? 'bg-green-50 dark:bg-green-900/20' : ;
                      team.qualified_to_lower ? 'bg-yellow-50 dark:bg-yellow-900/20' : '';
                    }`};
                    onClick={() => navigateTo?.('team-detail', { id: team.id })};
                  >;
                    <td className="px-4 py-3 whitespace-nowrap text-sm font-medium text-gray-900 dark:text-white">;
                      {team.position};
                    </td>;
                    <td className="px-4 py-3 whitespace-nowrap">;
                      <div className="flex items-center space-x-3">;
                        <TeamLogo team={team} size="w-8 h-8" />;
                        <div>;
                          <div className="text-sm font-medium text-gray-900 dark:text-white">;
                            {team.name};
                          </div>;
                          {team.country && (;
                            <span className="text-lg" title={team.country}>;
                              {getCountryFlag(team.country)};
                            </span>;
                          )};
                        </div>;
                      </div>;
                    </td>;
                    <td className="px-4 py-3 whitespace-nowrap text-sm text-center text-gray-900 dark:text-white font-medium">;
                      {team.wins}-{team.losses};
                    </td>;
                    <td className="px-4 py-3 whitespace-nowrap text-sm text-center text-gray-600 dark:text-gray-300">;
                      {team.map_wins - team.map_losses > 0 ? '+' : ''}{team.map_wins - team.map_losses};
                    </td>;
                    <td className="px-4 py-3 whitespace-nowrap text-sm text-center text-gray-600 dark:text-gray-300">;
                      {team.buchholz_score?.toFixed(1)};
                    </td>;
                    <td className="px-4 py-3 whitespace-nowrap text-sm text-center">;
                      {team.qualified_to_upper && (;
                        <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800 dark:bg-green-800 dark:text-green-100">;
                          Upper;
                        </span>;
                      )};
                      {team.qualified_to_lower && (;
                        <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800 dark:bg-yellow-800 dark:text-yellow-100">;
                          Lower;
                        </span>;
                      )};
                    </td>;
                  </tr>;
                ))};
              </tbody>;
            </table>;
          </div>;
          ;
          {/* Qualification Rules */};
          <div className="mt-4 p-4 bg-gray-50 dark:bg-gray-800 rounded-lg">;
            <h4 className="text-sm font-semibold text-gray-700 dark:text-gray-300 mb-2">;
              Qualification Rules;
            </h4>;
            <ul className="text-sm text-gray-600 dark:text-gray-400 space-y-1">;
              <li>• {qualification_rules?.upper_bracket || 'Top 4 teams'} advance to Upper Bracket</li>;
              <li>• {qualification_rules?.lower_bracket || 'Bottom 4 teams'} advance to Lower Bracket</li>;
            </ul>;
          </div>;
        </div>;
;
        {/* Swiss Matches */};
        <div className="swiss-matches">;
          <h3 className="text-lg font-bold mb-4 text-gray-900 dark:text-white">Swiss Matches</h3>;
          <div className="space-y-6">;
            {rounds?.map((round) => (;
              <div key={round.round} className="swiss-round">;
                <h4 className="text-sm font-semibold text-gray-700 dark:text-gray-300 mb-3">;
                  {round.name};
                </h4>;
                <div className="space-y-2">;
                  {round.matches?.map((match) => (;
                    <SwissMatch;
                      key={match.id};
                      match={match};
                      isAdmin={isAdmin};
                      onMatchUpdate={onMatchUpdate};
                      navigateTo={navigateTo};
                    />;
                  ))};
                </div>;
              </div>;
            ))};
          </div>;
        </div>;
      </div>;
    </div>;
};
;
// Swiss Match Component;
function SwissMatch({ match, isAdmin, onMatchUpdate, navigateTo }) {;
;
  const handleScoreUpdate = async (teamNum, newScore) => {;
    ;
    await onMatchUpdate(match.id, {;
      [`team${teamNum}_score`]: parseInt(newScore) || 0;
;
  return (;
    <div ;
      className={`swiss-match bg-white dark:bg-gray-800 rounded-lg border overflow-hidden transition-all ${;
        isLive ? 'border-red-500 shadow-lg' : 'border-gray-200 dark:border-gray-700';
      } ${match.id ? 'cursor-pointer hover:shadow-md' : ''}`};
      onClick={(e) => {;
        if (!e.target.closest('.score-input') && match.id && navigateTo) {;
        };
      }};
    >;
      {/* Match Header */};
      {(isLive || match.scheduled_at) && (;
        <div className="px-4 py-2 bg-gray-50 dark:bg-gray-700 border-b border-gray-200 dark:border-gray-600 flex items-center justify-between">;
          <span className="text-xs text-gray-500 dark:text-gray-400">;
            {match.format || 'BO3'};
          </span>;
          {isLive && (;
            <div className="flex items-center space-x-2">;
              <span className="relative flex h-2 w-2">;
                <span className="animate-ping absolute inline-flex h-full w-full rounded-full bg-red-400 opacity-75"></span>;
                <span className="relative inline-flex rounded-full h-2 w-2 bg-red-500"></span>;
              </span>;
              <span className="text-xs font-bold text-red-600 dark:text-red-400">LIVE</span>;
            </div>;
          )};
          {!isLive && match.scheduled_at && (;
            <span className="text-xs text-gray-500 dark:text-gray-400">;
              {new Date(match.scheduled_at).toLocaleTimeString('en-US', {;
                hour: '2-digit',;
                minute: '2-digit';
              })};
            </span>;
          )};
        </div>;
      )};
;
      {/* Teams */};
      <div className="divide-y divide-gray-200 dark:divide-gray-700">;
        {/* Team 1 */};
        <div className={`flex items-center justify-between p-4 ${;
          isCompleted && match.team1?.score > match.team2?.score ? 'bg-green-50 dark:bg-green-900/20' : '';
        }`}>;
          <div className="flex items-center space-x-3 flex-1">;
            {match.team1 ? (;
              <>;
                <TeamLogo team={match.team1} size="w-6 h-6" />;
                <div>;
                  <div className="font-medium text-gray-900 dark:text-white">;
                    {match.team1.name};
                  </div>;
                </div>;
              </>;
            ) : (;
              <span className="text-gray-400 dark:text-gray-600 italic">TBD</span>;
            )};
          </div>;
          {canEdit ? (;
            <input;
              type="number";
              min="0";
              max="2";
              value={match.team1?.score || 0};
              onChange={(e) => handleScoreUpdate(1, e.target.value)};
              className="score-input w-12 px-2 py-1 text-center border rounded";
              onClick={(e) => e.stopPropagation()};
            />;
          ) : (;
            <div className="text-lg font-bold text-gray-900 dark:text-white">;
              {match.team1?.score ?? '-'};
            </div>;
          )};
        </div>;
;
        {/* Team 2 */};
        <div className={`flex items-center justify-between p-4 ${;
          isCompleted && match.team2?.score > match.team1?.score ? 'bg-green-50 dark:bg-green-900/20' : '';
        }`}>;
          <div className="flex items-center space-x-3 flex-1">;
            {match.team2 ? (;
              <>;
                <TeamLogo team={match.team2} size="w-6 h-6" />;
                <div>;
                  <div className="font-medium text-gray-900 dark:text-white">;
                    {match.team2.name};
                  </div>;
                </div>;
              </>;
            ) : (;
              <span className="text-gray-400 dark:text-gray-600 italic">TBD</span>;
            )};
          </div>;
          {canEdit ? (;
            <input;
              type="number";
              min="0";
              max="2";
              value={match.team2?.score || 0};
              onChange={(e) => handleScoreUpdate(2, e.target.value)};
              className="score-input w-12 px-2 py-1 text-center border rounded";
              onClick={(e) => e.stopPropagation()};
            />;
          ) : (;
            <div className="text-lg font-bold text-gray-900 dark:text-white">;
              {match.team2?.score ?? '-'};
            </div>;
          )};
        </div>;
      </div>;
    </div>;
};
;
// Playoff Bracket Component;
function PlayoffBracket({ playoffData, eventId, isAdmin, onMatchUpdate, navigateTo, zoom, hoveredMatch, setHoveredMatch }) {;
;
;
  return (;
    <div className="playoff-bracket p-6 overflow-x-auto" style={{ transform: `scale(${zoom})`, transformOrigin: 'top left' }}>;
      <div className="min-w-max">;
        {/* Upper Bracket */};
        <div className="upper-bracket mb-16">;
          <h3 className="text-sm font-bold text-gray-700 dark:text-gray-300 mb-6 tracking-wider uppercase">;
            Upper Bracket;
          </h3>;
          <BracketSection;
            rounds={upper_bracket};
            bracketType="upper";
            isAdmin={isAdmin};
            onMatchUpdate={onMatchUpdate};
            navigateTo={navigateTo};
            hoveredMatch={hoveredMatch};
            setHoveredMatch={setHoveredMatch};
          />;
        </div>;
;
        {/* Grand Final */};
        {grand_final && (;
          <div className="grand-final mb-16 flex justify-center">;
            <div className="text-center">;
              <h3 className="text-sm font-bold text-gray-700 dark:text-gray-300 mb-6 tracking-wider uppercase">;
                Grand Final;
              </h3>;
              <PlayoffMatch;
                match={grand_final};
                isGrandFinal={true};
                isAdmin={isAdmin};
                onMatchUpdate={onMatchUpdate};
                navigateTo={navigateTo};
                hoveredMatch={hoveredMatch};
                setHoveredMatch={setHoveredMatch};
              />;
            </div>;
          </div>;
        )};
;
        {/* Lower Bracket */};
        <div className="lower-bracket">;
          <h3 className="text-sm font-bold text-gray-700 dark:text-gray-300 mb-6 tracking-wider uppercase">;
            Lower Bracket;
          </h3>;
          <BracketSection;
            rounds={lower_bracket};
            bracketType="lower";
            isAdmin={isAdmin};
            onMatchUpdate={onMatchUpdate};
            navigateTo={navigateTo};
            hoveredMatch={hoveredMatch};
            setHoveredMatch={setHoveredMatch};
          />;
        </div>;
      </div>;
    </div>;
};
;
// Bracket Section Component;
function BracketSection({ rounds, bracketType, isAdmin, onMatchUpdate, navigateTo, hoveredMatch, setHoveredMatch }) {;
;
  return (;
    <div className="bracket-section flex items-start space-x-8">;
      {rounds.map((round, roundIndex) => (;
        <div key={`${bracketType}-round-${round.round}`} className="bracket-round">;
          <h4 className="text-xs font-semibold text-gray-600 dark:text-gray-400 mb-4 text-center">;
            {round.name};
          </h4>;
          <div className="space-y-8" style={{ marginTop: `${roundIndex * 40}px` }}>;
            {round.matches?.map((match) => (;
              <PlayoffMatch;
                key={match.id || match.match_number};
                match={match};
                isAdmin={isAdmin};
                onMatchUpdate={onMatchUpdate};
                navigateTo={navigateTo};
                hoveredMatch={hoveredMatch};
                setHoveredMatch={setHoveredMatch};
              />;
            ))};
          </div>;
        </div>;
      ))};
    </div>;
};
;
// Playoff Match Component;
function PlayoffMatch({ match, isGrandFinal, isAdmin, onMatchUpdate, navigateTo, hoveredMatch, setHoveredMatch }) {;
;
;
  const handleScoreUpdate = async (teamNum, newScore) => {;
    ;
    await onMatchUpdate(match.id, {;
      [`team${teamNum}_score`]: parseInt(newScore) || 0;
;
  return (;
    <div;
      className={`playoff-match bg-white dark:bg-gray-800 rounded-lg border overflow-hidden transition-all min-w-[280px] ${;
        isLive ? 'border-red-500 shadow-lg scale-105' : 'border-gray-300 dark:border-gray-600';
      } ${hoveredMatch?.id === match.id ? 'shadow-xl scale-105 z-10' : ''} ${;
        match.id ? 'cursor-pointer' : '';
      } ${isGrandFinal ? 'border-2 border-yellow-500' : ''}`};
      onMouseEnter={() => setHoveredMatch?.(match)};
      onMouseLeave={() => setHoveredMatch?.(null)};
      onClick={(e) => {;
        if (!e.target.closest('.score-input') && match.id && navigateTo) {;
        };
      }};
    >;
      {/* Match Header */};
      <div className={`px-3 py-2 border-b border-gray-200 dark:border-gray-700 flex items-center justify-between ${;
        isGrandFinal ? 'bg-yellow-50 dark:bg-yellow-900/20' : 'bg-gray-50 dark:bg-gray-700';
      }`}>;
        <div className="flex items-center space-x-2">;
          <span className="text-xs text-gray-500 dark:text-gray-400">;
            {match.match_number || `Match ${match.id}`};
          </span>;
          <span className="text-xs text-gray-500 dark:text-gray-400">;
            • {match.format || 'BO5'};
          </span>;
        </div>;
        {isLive && (;
          <div className="flex items-center space-x-2">;
            <span className="relative flex h-2 w-2">;
              <span className="animate-ping absolute inline-flex h-full w-full rounded-full bg-red-400 opacity-75"></span>;
              <span className="relative inline-flex rounded-full h-2 w-2 bg-red-500"></span>;
            </span>;
            <span className="text-xs font-bold text-red-600 dark:text-red-400">LIVE</span>;
          </div>;
        )};
      </div>;
;
      {/* Teams */};
      <div className="divide-y divide-gray-200 dark:divide-gray-700">;
        {/* Team 1 */};
        <div className={`flex items-center justify-between p-3 ${;
          team1Won ? 'bg-green-50 dark:bg-green-900/20' : '';
        } ${team2Won ? 'opacity-60' : ''}`}>;
          <div className="flex items-center space-x-3 flex-1 min-w-0">;
            {match.team1 ? (;
              <>;
                <TeamLogo team={match.team1} size="w-6 h-6" />;
                <div className="min-w-0 flex-1">;
                  <div className="font-medium text-gray-900 dark:text-white truncate">;
                    {match.team1.name};
                  </div>;
                  {match.team1.source && !match.team1.id && (;
                    <div className="text-xs text-gray-500 dark:text-gray-400">;
                      {match.team1.source};
                    </div>;
                  )};
                </div>;
              </>;
            ) : (;
              <span className="text-gray-400 dark:text-gray-600 italic text-sm">;
                {match.team1_source || 'TBD'};
              </span>;
            )};
          </div>;
          {canEdit && match.team1?.id ? (;
            <input;
              type="number";
              min="0";
              max="4";
              value={match.team1?.score || 0};
              onChange={(e) => handleScoreUpdate(1, e.target.value)};
              className="score-input w-12 px-2 py-1 text-center border rounded";
              onClick={(e) => e.stopPropagation()};
            />;
          ) : (;
            <div className={`text-lg font-bold ${;
              team1Won ? 'text-gray-900 dark:text-white' : 'text-gray-500 dark:text-gray-400';
            }`}>;
              {match.team1?.score ?? '-'};
            </div>;
          )};
        </div>;
;
        {/* Team 2 */};
        <div className={`flex items-center justify-between p-3 ${;
          team2Won ? 'bg-green-50 dark:bg-green-900/20' : '';
        } ${team1Won ? 'opacity-60' : ''}`}>;
          <div className="flex items-center space-x-3 flex-1 min-w-0">;
            {match.team2 ? (;
              <>;
                <TeamLogo team={match.team2} size="w-6 h-6" />;
                <div className="min-w-0 flex-1">;
                  <div className="font-medium text-gray-900 dark:text-white truncate">;
                    {match.team2.name};
                  </div>;
                  {match.team2.source && !match.team2.id && (;
                    <div className="text-xs text-gray-500 dark:text-gray-400">;
                      {match.team2.source};
                    </div>;
                  )};
                </div>;
              </>;
            ) : (;
              <span className="text-gray-400 dark:text-gray-600 italic text-sm">;
                {match.team2_source || 'TBD'};
              </span>;
            )};
          </div>;
          {canEdit && match.team2?.id ? (;
            <input;
              type="number";
              min="0";
              max="4";
              value={match.team2?.score || 0};
              onChange={(e) => handleScoreUpdate(2, e.target.value)};
              className="score-input w-12 px-2 py-1 text-center border rounded";
              onClick={(e) => e.stopPropagation()};
            />;
          ) : (;
            <div className={`text-lg font-bold ${;
              team2Won ? 'text-gray-900 dark:text-white' : 'text-gray-500 dark:text-gray-400';
            }`}>;
              {match.team2?.score ?? '-'};
            </div>;
          )};
        </div>;
      </div>;
;
      {/* Match Footer */};
      {(match.scheduled_at && !isLive && !isCompleted) && (;
        <div className="px-3 py-2 bg-gray-50 dark:bg-gray-700 border-t border-gray-200 dark:border-gray-600">;
          <span className="text-xs text-gray-500 dark:text-gray-400">;
            {new Date(match.scheduled_at).toLocaleString('en-US', {;
              month: 'short',;
              day: 'numeric',;
              hour: '2-digit',;
              minute: '2-digit';
            })};
          </span>;
        </div>;
      )};
    </div>;
};
;
// Team Progression Component;
function TeamProgression({ eventId, navigateTo }) {;
;
  useEffect(() => {;
;
  const fetchProgression = async () => {;
    try {;
      ;
      if (data.success) {;
      };
    } catch (err) {;
    } finally {;
    };
;
  if (loading) {;
    return (;
      <div className="flex items-center justify-center h-96">;
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-red-600"></div>;
      </div>;
  };
;
  return (;
    <div className="team-progression p-6">;
      <h3 className="text-lg font-bold mb-6 text-gray-900 dark:text-white">Team Progression</h3>;
      ;
      <div className="bg-white dark:bg-gray-800 rounded-lg shadow overflow-hidden">;
        <table className="w-full">;
          <thead className="bg-gray-50 dark:bg-gray-700">;
            <tr>;
              <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">;
                Place;
              </th>;
              <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">;
                Team;
              </th>;
              <th className="px-4 py-3 text-center text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">;
                Stage;
              </th>;
              <th className="px-4 py-3 text-center text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">;
                Matches;
              </th>;
              <th className="px-4 py-3 text-center text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">;
                Maps;
              </th>;
              <th className="px-4 py-3 text-center text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">;
                Elimination;
              </th>;
            </tr>;
          </thead>;
          <tbody className="divide-y divide-gray-200 dark:divide-gray-700">;
            {progression?.map((team) => (;
              <tr ;
                key={team.id};
                className="hover:bg-gray-50 dark:hover:bg-gray-700 cursor-pointer";
                onClick={() => navigateTo?.('team-detail', { id: team.id })};
              >;
                <td className="px-4 py-3 whitespace-nowrap text-sm font-medium text-gray-900 dark:text-white">;
                  {team.final_placement || '-'};
                </td>;
                <td className="px-4 py-3 whitespace-nowrap">;
                  <div className="flex items-center space-x-3">;
                    <TeamLogo team={team} size="w-8 h-8" />;
                    <div>;
                      <div className="text-sm font-medium text-gray-900 dark:text-white">;
                        {team.name};
                      </div>;
                    </div>;
                  </div>;
                </td>;
                <td className="px-4 py-3 whitespace-nowrap text-sm text-center">;
                  <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${;
                    team.stage === 'champion' ? 'bg-yellow-100 text-yellow-800 dark:bg-yellow-800 dark:text-yellow-100' :;
                    team.stage === 'eliminated' ? 'bg-red-100 text-red-800 dark:bg-red-800 dark:text-red-100' :;
                    team.stage === 'upper_bracket' ? 'bg-green-100 text-green-800 dark:bg-green-800 dark:text-green-100' :;
                    team.stage === 'lower_bracket' ? 'bg-blue-100 text-blue-800 dark:bg-blue-800 dark:text-blue-100' :;
                    'bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-100';
                  }`}>;
                    {team.stage?.replace('_', ' ')};
                  </span>;
                </td>;
                <td className="px-4 py-3 whitespace-nowrap text-sm text-center text-gray-600 dark:text-gray-300">;
                  {team.matches_won}-{team.matches_played - team.matches_won};
                </td>;
                <td className="px-4 py-3 whitespace-nowrap text-sm text-center text-gray-600 dark:text-gray-300">;
                  {team.maps_won}-{team.maps_played - team.maps_won};
                </td>;
                <td className="px-4 py-3 whitespace-nowrap text-sm text-center text-gray-600 dark:text-gray-300">;
                  {team.elimination_round || '-'};
                </td>;
              </tr>;
            ))};
          </tbody>;
        </table>;
      </div>;
    </div>;
};
;
