import React, { useState, useEffect } from 'react';;
import TournamentBracketVisualization from '../TournamentBracketVisualization';;
import { TeamLogo } from '../../utils/imageUtils';;
;
function TournamentsPage() {;
  const [tournaments, setTournaments] = useState([]);;
  const [loading, setLoading] = useState(true);;
  const [error, setError] = useState(null);;
  const [filter, setFilter] = useState('all');;
  const [selectedTournament, setSelectedTournament] = useState(null);;
;
  useEffect(() => {;
    fetchTournaments();;
  }, [filter]);;
;
  const fetchTournaments = async () => {;
    try {;
      setLoading(true);;
      let url = '/api/tournaments';;
      if (filter !== 'all') {;
        url += `?status=${filter}`;;
      };
      ;
      const response = await fetch(url);;
      const data = await response.json();;
      ;
      if (response.ok) {;
        setTournaments(data.data || []);;
      } else {;
        setError('Failed to load tournaments');;
      };
    } catch (err) {;
      setError('Error loading tournaments: ' + err.message);;
    } finally {;
      setLoading(false);;
    };
  };;
;
  const navigateTo = (type, params) => {;
    if (type === 'match-detail' && params.id) {;
      window.location.href = `/matches/${params.id}`;;
    };
  };;
;
  if (loading) {;
    return (;
      <div className="min-h-screen bg-gray-50 dark:bg-gray-900 flex items-center justify-center">;
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>;
      </div>;
    );;
  };
;
  if (error) {;
    return (;
      <div className="min-h-screen bg-gray-50 dark:bg-gray-900 flex items-center justify-center">;
        <div className="text-red-500">{error}</div>;
      </div>;
    );;
  };
;
  return (;
    <div className="min-h-screen bg-gray-50 dark:bg-gray-900">;
      {!selectedTournament ? (;
        <>;
          {/* Header */};
          <div className="bg-white dark:bg-gray-800 shadow">;
            <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">;
              <div className="flex items-center justify-between">;
                <div>;
                  <h1 className="text-3xl font-bold text-gray-900 dark:text-white">;
                    Marvel Rivals Tournaments;
                  </h1>;
                  <p className="mt-1 text-gray-500 dark:text-gray-400">;
                    Official tournament brackets and results;
                  </p>;
                </div>;
                ;
                {/* Filter Tabs */};
                <div className="flex space-x-2">;
                  <button;
                    onClick={() => setFilter('all')};
                    className={`px-4 py-2 text-sm font-medium rounded-lg ${;
                      filter === 'all';
                        ? 'bg-blue-600 text-white';
                        : 'bg-gray-200 text-gray-700 hover:bg-gray-300 dark:bg-gray-700 dark:text-gray-300 dark:hover:bg-gray-600';
                    }`};
                  >;
                    All;
                  </button>;
                  <button;
                    onClick={() => setFilter('ongoing')};
                    className={`px-4 py-2 text-sm font-medium rounded-lg ${;
                      filter === 'ongoing';
                        ? 'bg-blue-600 text-white';
                        : 'bg-gray-200 text-gray-700 hover:bg-gray-300 dark:bg-gray-700 dark:text-gray-300 dark:hover:bg-gray-600';
                    }`};
                  >;
                    Ongoing;
                  </button>;
                  <button;
                    onClick={() => setFilter('upcoming')};
                    className={`px-4 py-2 text-sm font-medium rounded-lg ${;
                      filter === 'upcoming';
                        ? 'bg-blue-600 text-white';
                        : 'bg-gray-200 text-gray-700 hover:bg-gray-300 dark:bg-gray-700 dark:text-gray-300 dark:hover:bg-gray-600';
                    }`};
                  >;
                    Upcoming;
                  </button>;
                  <button;
                    onClick={() => setFilter('completed')};
                    className={`px-4 py-2 text-sm font-medium rounded-lg ${;
                      filter === 'completed';
                        ? 'bg-blue-600 text-white';
                        : 'bg-gray-200 text-gray-700 hover:bg-gray-300 dark:bg-gray-700 dark:text-gray-300 dark:hover:bg-gray-600';
                    }`};
                  >;
                    Completed;
                  </button>;
                </div>;
              </div>;
            </div>;
          </div>;
;
          {/* Tournament List */};
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">;
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">;
              {tournaments.map(tournament => (;
                <TournamentCard;
                  key={tournament.id};
                  tournament={tournament};
                  onViewBracket={() => setSelectedTournament(tournament)};
                />;
              ))};
            </div>;
;
            {tournaments.length === 0 && (;
              <div className="text-center py-12">;
                <p className="text-gray-500 dark:text-gray-400">;
                  No tournaments found;
                </p>;
              </div>;
            )};
          </div>;
        </>;
      ) : (;
        <>;
          {/* Back Button */};
          <div className="bg-white dark:bg-gray-800 shadow">;
            <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4">;
              <button;
                onClick={() => setSelectedTournament(null)};
                className="flex items-center text-gray-600 hover:text-gray-900 dark:text-gray-400 dark:hover:text-white";
              >;
                <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">;
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />;
                </svg>;
                Back to Tournaments;
              </button>;
            </div>;
          </div>;
;
          {/* Tournament Bracket */};
          <TournamentBracketVisualization;
            tournamentSlug={selectedTournament.slug};
            navigateTo={navigateTo};
            isAdmin={false};
          />;
        </>;
      )};
    </div>;
  );;
};
;
// Tournament Card Component;
function TournamentCard({ tournament, onViewBracket }) {;
  const getStatusColor = (status) => {;
    switch (status) {;
      case 'ongoing':;
        return 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200';;
      case 'upcoming':;
        return 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200';;
      case 'completed':;
        return 'bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300';;
      default:;
        return 'bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300';;
    };
  };;
;
  const formatDate = (date) => {;
    if (!date) return '';;
    return new Date(date).toLocaleDateString('en-US', {;
      month: 'short',;
      day: 'numeric',;
      year: 'numeric';
    });;
  };;
;
  return (;
    <div className="bg-white dark:bg-gray-800 rounded-lg shadow hover:shadow-lg transition-shadow">;
      {/* Tournament Header */};
      <div className="p-6">;
        <div className="flex items-start justify-between mb-4">;
          <div>;
            <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-1">;
              {tournament.name};
            </h3>;
            <p className="text-sm text-gray-500 dark:text-gray-400">;
              {tournament.region} â€¢ {tournament.team_count} Teams;
            </p>;
          </div>;
          <span className={`px-2 py-1 text-xs font-medium rounded-full ${getStatusColor(tournament.status)}`}>;
            {tournament.status.charAt(0).toUpperCase() + tournament.status.slice(1)};
          </span>;
        </div>;
;
        {/* Tournament Info */};
        <div className="space-y-2 mb-4">;
          <div className="flex items-center justify-between text-sm">;
            <span className="text-gray-500 dark:text-gray-400">Type:</span>;
            <span className="text-gray-900 dark:text-white font-medium">;
              {tournament.type === 'swiss_double_elim' ? 'Swiss + Double Elim' : tournament.type};
            </span>;
          </div>;
          {tournament.prize_pool && (;
            <div className="flex items-center justify-between text-sm">;
              <span className="text-gray-500 dark:text-gray-400">Prize Pool:</span>;
              <span className="text-green-600 dark:text-green-400 font-medium">;
                ${tournament.prize_pool.toLocaleString()};
              </span>;
            </div>;
          )};
          <div className="flex items-center justify-between text-sm">;
            <span className="text-gray-500 dark:text-gray-400">Dates:</span>;
            <span className="text-gray-900 dark:text-white">;
              {formatDate(tournament.start_date)} - {formatDate(tournament.end_date)};
            </span>;
          </div>;
        </div>;
;
        {/* Teams Preview */};
        {tournament.teams && tournament.teams.length > 0 && (;
          <div className="mb-4">;
            <p className="text-xs text-gray-500 dark:text-gray-400 mb-2">Participating Teams:</p>;
            <div className="flex -space-x-2 overflow-hidden">;
              {tournament.teams.slice(0, 6).map((team, index) => (;
                <div;
                  key={team.id};
                  className="inline-block h-8 w-8 rounded-full ring-2 ring-white dark:ring-gray-800 overflow-hidden bg-gray-200 dark:bg-gray-700";
                  title={team.name};
                >;
                  <TeamLogo team={team} size="w-8 h-8" />;
                </div>;
              ))};
              {tournament.teams.length > 6 && (;
                <div className="inline-block h-8 w-8 rounded-full ring-2 ring-white dark:ring-gray-800 bg-gray-300 dark:bg-gray-600 flex items-center justify-center">;
                  <span className="text-xs font-medium text-gray-600 dark:text-gray-300">;
                    +{tournament.teams.length - 6};
                  </span>;
                </div>;
              )};
            </div>;
          </div>;
        )};
;
        {/* Action Button */};
        <button;
          onClick={onViewBracket};
          className="w-full bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded-lg transition-colors";
        >;
          View Bracket;
        </button>;
      </div>;
    </div>;
  );;
};
;
export default TournamentsPage;;