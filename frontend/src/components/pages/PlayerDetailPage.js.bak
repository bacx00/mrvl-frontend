import React, { useState, useEffect } from 'react';
import { useAuth } from '../../hooks';
import { PlayerAvatar, TeamLogo, getCountryFlag, getHeroImageSync } from '../../utils/imageUtils';
import { parseTextWithMentions } from '../shared/UserDisplay';
import { countryNames } from '../../utils/countryUtils';
import MentionsSection from '../shared/MentionsSection';
import { HEROES } from '../../constants/marvelRivalsData';

function PlayerDetailPage({ params, navigateTo }) {
  const [player, setPlayer] = useState(null);
  const [stats, setStats] = useState({});
  const [matchHistory, setMatchHistory] = useState([]);
  const [heroStats, setHeroStats] = useState([]);
  const [performanceStats, setPerformanceStats] = useState(null);
  const [mapStats, setMapStats] = useState([]);
  const [eventStats, setEventStats] = useState([]);
  const [loading, setLoading] = useState(true);
  const [dataLoading, setDataLoading] = useState(false);
  const [pagination, setPagination] = useState({ current_page: 1, last_page: 1, per_page: 20, total: 0 });
  const [filters, setFilters] = useState({ date_from: '', date_to: '', event_id: '', hero: '', map: '' });
  const { api } = useAuth();

  const playerId = params?.id;

  // Country names mapping
  const countryNames = {
    'US': 'United States',
    'CA': 'Canada',
    'GB': 'United Kingdom',
    'DE': 'Germany',
    'FR': 'France',
    'ES': 'Spain',
    'IT': 'Italy',
    'NL': 'Netherlands',
    'SE': 'Sweden',
    'NO': 'Norway',
    'DK': 'Denmark',
    'FI': 'Finland',
    'AU': 'Australia',
    'NZ': 'New Zealand',
    'JP': 'Japan',
    'KR': 'South Korea',
    'CN': 'China',
    'TW': 'Taiwan',
    'SG': 'Singapore',
    'TH': 'Thailand',
    'VN': 'Vietnam',
    'ID': 'Indonesia',
    'MY': 'Malaysia',
    'PH': 'Philippines',
    'BR': 'Brazil',
    'AR': 'Argentina',
    'CL': 'Chile',
    'CO': 'Colombia',
    'PE': 'Peru',
    'MX': 'Mexico',
    'RU': 'Russia',
    'PL': 'Poland',
    'CZ': 'Czech Republic',
    'HU': 'Hungary',
    'RO': 'Romania',
    'BG': 'Bulgaria',
    'IN': 'India',
    'PK': 'Pakistan',
    'BD': 'Bangladesh',
    'LK': 'Sri Lanka',
    'NP': 'Nepal',
    'ZA': 'South Africa',
    'EG': 'Egypt',
    'MA': 'Morocco',
    'NG': 'Nigeria',
    'KE': 'Kenya',
    'GH': 'Ghana',
    'TN': 'Tunisia'
  };

  useEffect(() => {
    if (playerId) {
      fetchPlayerData();
    }
  }, [playerId]);

  const fetchPlayerData = async () => {
    try {
      setLoading(true);
      
      // Fetch comprehensive player data from API
      const response = await api.get(`/players/${playerId}`);
      const playerData = response.data?.data || response.data || response;
      
      // Transform backend data to frontend format
      const transformedPlayer = {
        id: playerData.id,
        username: playerData.username,
        realName: playerData.real_name,
        avatar: playerData.avatar,
        country: playerData.country,
        flag: playerData.flag || getCountryFlag(playerData.country),
        age: playerData.age,
        status: playerData.status,
        biography: playerData.biography,
        
        // Role and heroes
        role: playerData.role,
        mainHero: playerData.main_hero,
        altHeroes: playerData.alt_heroes || [],
        
        // Team information
        currentTeam: playerData.current_team,
        teamHistory: playerData.team_history || playerData.past_teams || [],
        
        // Social media
        socialMedia: playerData.social_media || {},
        streaming: playerData.streaming || {},
        
        // Marvel Rivals specific
        region: playerData.region,
        lastActive: playerData.last_active,
        totalEarnings: playerData.earnings || playerData.total_earnings || 0,
        
        // Rating from performance stats
        rating: playerData.stats?.ratings?.current || playerData.rating,
        
        // Event data
        eventPlacements: playerData.event_placements || [],
        heroStats: playerData.hero_stats || []
      };
      
      // Set player data
      setPlayer(transformedPlayer);
      
      // Set comprehensive stats from backend
      if (playerData.stats) {
        setStats(playerData.stats);
      }
      
      // Load comprehensive player statistics using new API endpoints
      await fetchPlayerStats();
      
    } catch (error) {
      console.error('Error fetching player data:', error);
      setPlayer(null);
      setStats({});
      setMatchHistory([]);
      setHeroStats([]);
      setPerformanceStats(null);
      setMapStats([]);
      setEventStats([]);
    } finally {
      setLoading(false);
    }
  };

  // Fetch comprehensive player statistics from new API endpoints
  const fetchPlayerStats = async (page = 1, currentFilters = filters) => {
    if (!playerId) return;
    
    try {
      setDataLoading(true);
      
      // Build query parameters
      const params = new URLSearchParams({
        page: page.toString(),
        per_page: pagination.per_page.toString(),
        ...Object.fromEntries(Object.entries(currentFilters).filter(([_, value]) => value))
      });
      
      // Fetch all player statistics in parallel
      const [matchHistoryResponse, heroStatsResponse, performanceResponse, mapStatsResponse, eventStatsResponse] = await Promise.all([
        api.get(`/public/players/${playerId}/match-history?${params}`).catch(() => ({ data: { data: [], meta: {} } })),
        api.get(`/public/players/${playerId}/hero-stats?${params}`).catch(() => ({ data: { data: [] } })),
        api.get(`/public/players/${playerId}/performance-stats?${params}`).catch(() => ({ data: { data: {} } })),
        api.get(`/public/players/${playerId}/map-stats?${params}`).catch(() => ({ data: { data: [] } })),
        api.get(`/public/players/${playerId}/event-stats?${params}`).catch(() => ({ data: { data: [] } }))
      ]);
      
      // Set match history with pagination
      const matchData = matchHistoryResponse.data.data || [];
      setMatchHistory(matchData);
      if (matchHistoryResponse.data.meta) {
        setPagination(matchHistoryResponse.data.meta);
      }
      
      // Set hero statistics
      const heroData = heroStatsResponse.data.data || [];
      setHeroStats(heroData);
      
      // Set performance statistics (overall career stats)
      const perfData = performanceResponse.data.data || {};
      setPerformanceStats(perfData);
      
      // Update player rating from performance stats if available
      if (perfData.ratings && perfData.ratings.current && player) {
        setPlayer(prevPlayer => ({
          ...prevPlayer,
          rating: perfData.ratings.current
        }));
      }
      
      // Set map statistics
      const mapData = mapStatsResponse.data.data || [];
      setMapStats(mapData);
      
      // Set event statistics
      const eventData = eventStatsResponse.data.data || [];
      setEventStats(eventData);
      
      console.log('Player stats loaded:', {
        matches: matchData.length,
        heroes: heroData.length,
        maps: mapData.length,
        events: eventData.length
      });
      
    } catch (error) {
      console.error('Error fetching player statistics:', error);
    } finally {
      setDataLoading(false);
    }
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-red-600"></div>
      </div>
    );
  }

  if (!player) {
    return (
      <div className="text-center py-8">
        <h2 className="text-2xl font-bold text-gray-800 dark:text-gray-200">Player not found</h2>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Player Header */}
      <div className="card bg-gradient-to-r from-gray-50 to-gray-100 dark:from-gray-800 dark:to-gray-900 p-8">
        <div className="flex flex-col md:flex-row items-center md:items-start space-y-6 md:space-y-0 md:space-x-8">
          <div className="relative">
            <PlayerAvatar 
              player={player} 
              size="xxlarge" 
              className="w-32 h-32 rounded-full ring-4 ring-white dark:ring-gray-700 shadow-xl"
            />
            {player.status === 'active' && (
              <div className="absolute bottom-0 right-0 w-6 h-6 bg-green-500 rounded-full border-2 border-white dark:border-gray-700"></div>
            )}
          </div>
          
          <div className="flex-1 text-center md:text-left">
            <div className="flex items-center justify-center md:justify-start space-x-3 mb-2">
              <h1 className="text-3xl md:text-4xl font-bold text-gray-900 dark:text-white">
                {player.username}
              </h1>
              {player.flag && (
                <span className="text-3xl" title={countryNames[player.country] || player.country}>
                  {player.flag}
                </span>
              )}
            </div>
            
            {/* Country Flag and Full Country Name */}
            <div className="flex items-center justify-center md:justify-start space-x-2 mb-3">
              {player.flag && (
                <span className="text-2xl" title={countryNames[player.country] || player.country}>
                  {player.flag}
                </span>
              )}
              <span className="text-lg text-gray-600 dark:text-gray-400">
                {countryNames[player.country] || player.country}
              </span>
            </div>
            
            {player.realName && (
              <p className="text-lg text-gray-600 dark:text-gray-400 mb-3">{player.realName}</p>
            )}
            
            <div className="flex flex-wrap items-center justify-center md:justify-start gap-3 mb-4">
              {player.currentTeam && (
                <button
                  onClick={() => navigateTo('team-detail', { id: player.currentTeam.id })}
                  className="flex items-center space-x-2 px-3 py-1 bg-white dark:bg-gray-800 rounded-lg shadow hover:shadow-md transition-shadow"
                >
                  <TeamLogo team={player.currentTeam} size="small" className="w-6 h-6" />
                  <span className="font-medium text-gray-900 dark:text-white">{player.currentTeam.name}</span>
                </button>
              )}
              <span className="px-3 py-1 bg-red-100 dark:bg-red-900/30 text-red-800 dark:text-red-200 rounded-lg font-medium">
                {player.role}
              </span>
              {player.mainHero && (
                <div className="flex items-center space-x-2 px-3 py-1 bg-gray-200 dark:bg-gray-700 rounded-lg">
                  <img 
                    src={getHeroImageSync(player.mainHero)} 
                    alt={player.mainHero}
                    className="w-6 h-6 rounded"
                  />
                  <span className="text-gray-900 dark:text-white">{player.mainHero}</span>
                </div>
              )}
            </div>
            
            {/* Social Links */}
            <div className="flex items-center justify-center md:justify-start space-x-3">
              {player.socialMedia?.twitter && (
                <a href={player.socialMedia.twitter} target="_blank" rel="noopener noreferrer"
                  className="text-gray-600 dark:text-gray-400 hover:text-blue-500 transition-colors">
                  <svg className="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
                    <path d="M23.953 4.57a10 10 0 01-2.825.775 4.958 4.958 0 002.163-2.723c-.951.555-2.005.959-3.127 1.184a4.92 4.92 0 00-8.384 4.482C7.69 8.095 4.067 6.13 1.64 3.162a4.822 4.822 0 00-.666 2.475c0 1.71.87 3.213 2.188 4.096a4.904 4.904 0 01-2.228-.616v.06a4.923 4.923 0 003.946 4.827 4.996 4.996 0 01-2.212.085 4.936 4.936 0 004.604 3.417 9.867 9.867 0 01-6.102 2.105c-.39 0-.779-.023-1.17-.067a13.995 13.995 0 007.557 2.209c9.053 0 13.998-7.496 13.998-13.985 0-.21 0-.42-.015-.63A9.935 9.935 0 0024 4.59z"/>
                  </svg>
                </a>
              )}
              {player.socialMedia?.twitch && (
                <a href={player.socialMedia.twitch} target="_blank" rel="noopener noreferrer"
                  className="text-gray-600 dark:text-gray-400 hover:text-purple-500 transition-colors">
                  <svg className="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
                    <path d="M11.571 4.714h1.715v5.143H11.57zm4.715 0H18v5.143h-1.714zM6 0L1.714 4.286v15.428h5.143V24l4.286-4.286h3.428L22.286 12V0zm14.571 11.143l-3.428 3.428h-3.429l-3 3v-3H6.857V1.714h13.714Z"/>
                  </svg>
                </a>
              )}
              {player.socialMedia?.youtube && (
                <a href={player.socialMedia.youtube} target="_blank" rel="noopener noreferrer"
                  className="text-gray-600 dark:text-gray-400 hover:text-red-500 transition-colors">
                  <svg className="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
                    <path d="M23.498 6.186a3.016 3.016 0 0 0-2.122-2.136C19.505 3.545 12 3.545 12 3.545s-7.505 0-9.377.505A3.017 3.017 0 0 0 .502 6.186C0 8.07 0 12 0 12s0 3.93.502 5.814a3.016 3.016 0 0 0 2.122 2.136c1.871.505 9.376.505 9.376.505s7.505 0 9.377-.505a3.015 3.015 0 0 0 2.122-2.136C24 15.93 24 12 24 12s0-3.93-.502-5.814zM9.545 15.568V8.432L15.818 12l-6.273 3.568z"/>
                  </svg>
                </a>
              )}
            </div>
          </div>
          
          {/* Stats Summary */}
          <div className="grid grid-cols-2 md:grid-cols-1 gap-4 text-center md:text-right">
            <div>
              <div className="text-3xl font-bold text-yellow-600 dark:text-yellow-400">{player.rating || 'N/A'}</div>
              <div className="text-sm text-gray-600 dark:text-gray-300">Rating</div>
            </div>
            <div>
              <div className="text-3xl font-bold text-green-600 dark:text-green-400">
                ${(player.totalEarnings || 0).toLocaleString()}
              </div>
              <div className="text-sm text-gray-600 dark:text-gray-300">Total Earnings</div>
            </div>
          </div>
        </div>
      </div>

      {/* Main Content Layout - VLR.gg Style */}
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
        {/* Main Content Area */}
        <div className="lg:col-span-2 space-y-8">

          {/* Player Basic Info */}
          <div className="card p-6">
            <h3 className="text-lg font-semibold text-red-600 dark:text-red-400 mb-4">Player Information</h3>
            <div className="grid grid-cols-2 md:grid-cols-4 gap-6">
              <div>
                <div className="text-gray-500 dark:text-gray-500 text-sm">Age</div>
                <div className="font-medium text-gray-900 dark:text-white mt-1">{player.age || 'N/A'}</div>
              </div>
              <div>
                <div className="text-gray-500 dark:text-gray-500 text-sm">Role</div>
                <div className="font-medium text-gray-900 dark:text-white mt-1">{player.role}</div>
              </div>
              <div>
                <div className="text-gray-500 dark:text-gray-500 text-sm">Region</div>
                <div className="font-medium text-gray-900 dark:text-white mt-1">{player.region || 'N/A'}</div>
              </div>
              <div>
                <div className="text-gray-500 dark:text-gray-500 text-sm">Rating</div>
                <div className="font-medium text-yellow-600 dark:text-yellow-400 mt-1">{player.rating || 'N/A'}</div>
              </div>
            </div>
          </div>

          {/* Player/Hero Performance Table - VLR.gg Style */}
          <div className="card p-6">
            <h3 className="text-lg font-semibold text-red-600 dark:text-red-400 mb-4">Performance</h3>
            {dataLoading ? (
              <div className="flex items-center justify-center py-8">
                <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-red-600"></div>
              </div>
            ) : matchHistory.length > 0 ? (
              <div className="overflow-x-auto">
                <table className="w-full">
                  <thead>
                    <tr className="border-b border-gray-200 dark:border-gray-700">
                      <th className="text-left px-4 py-3 text-sm font-semibold text-gray-600 dark:text-gray-400">Date</th>
                      <th className="text-left px-4 py-3 text-sm font-semibold text-gray-600 dark:text-gray-400">Event</th>
                      <th className="text-left px-4 py-3 text-sm font-semibold text-gray-600 dark:text-gray-400">Match</th>
                      <th className="text-left px-4 py-3 text-sm font-semibold text-gray-600 dark:text-gray-400">Hero</th>
                      <th className="text-center px-4 py-3 text-sm font-semibold text-gray-600 dark:text-gray-400">E</th>
                      <th className="text-center px-4 py-3 text-sm font-semibold text-gray-600 dark:text-gray-400">D</th>
                      <th className="text-center px-4 py-3 text-sm font-semibold text-gray-600 dark:text-gray-400">A</th>
                      <th className="text-center px-4 py-3 text-sm font-semibold text-gray-600 dark:text-gray-400">K/D</th>
                      <th className="text-center px-4 py-3 text-sm font-semibold text-gray-600 dark:text-gray-400">DMG</th>
                      <th className="text-center px-4 py-3 text-sm font-semibold text-gray-600 dark:text-gray-400">HEAL</th>
                      <th className="text-center px-4 py-3 text-sm font-semibold text-gray-600 dark:text-gray-400">BLK</th>
                    </tr>
                  </thead>
                  <tbody>
                    {matchHistory.slice(0, 20).map((match, index) => {
                      const kd = match.deaths > 0 ? (match.eliminations / match.deaths) : match.eliminations;
                      return (
                        <tr 
                          key={index}
                          onClick={() => navigateTo('match-detail', { id: match.match_id || match.id })}
                          className="border-b border-gray-100 dark:border-gray-800 hover:bg-gray-50 dark:hover:bg-gray-800 cursor-pointer"
                        >
                          <td className="px-4 py-3 text-sm text-gray-600 dark:text-gray-400">
                            {new Date(match.date || match.created_at).toLocaleDateString()}
                          </td>
                          <td className="px-4 py-3">
                            <div className="flex items-center space-x-2">
                              {match.event_logo && (
                                <img 
                                  src={match.event_logo} 
                                  alt={match.event_name}
                                  className="w-6 h-6 rounded"
                                />
                              )}
                              <span className="text-sm font-medium text-gray-900 dark:text-white">
                                {match.event_name || 'Scrim'}
                              </span>
                            </div>
                          </td>
                          <td className="px-4 py-3">
                            <div className="flex items-center space-x-2">
                              {match.opponent_team && (
                                <TeamLogo team={match.opponent_team} size="small" className="w-5 h-5" />
                              )}
                              <span className="text-sm text-gray-900 dark:text-white">
                                {match.team_score || 0} - {match.opponent_score || 0} {match.opponent_team?.name || 'TBD'}
                              </span>
                              <span className={`text-xs font-medium ${
                                match.result === 'win' ? 'text-green-600' : 'text-red-600'
                              }`}>
                                {match.result === 'win' ? 'W' : 'L'}
                              </span>
                            </div>
                          </td>
                          <td className="px-4 py-3">
                            <div className="flex items-center space-x-2">
                              <img 
                                src={getHeroImageSync(match.hero_played || player.mainHero)} 
                                alt={match.hero_played || player.mainHero}
                                className="w-6 h-6 rounded"
                              />
                              <span className="text-sm text-gray-900 dark:text-white">
                                {match.hero_played || player.mainHero}
                              </span>
                            </div>
                          </td>
                          <td className="px-4 py-3 text-center text-sm font-medium text-gray-900 dark:text-white">
                            {match.eliminations || match.kills || 0}
                          </td>
                          <td className="px-4 py-3 text-center text-sm font-medium text-gray-900 dark:text-white">
                            {match.deaths || 0}
                          </td>
                          <td className="px-4 py-3 text-center text-sm font-medium text-gray-900 dark:text-white">
                            {match.assists || 0}
                          </td>
                          <td className={`px-4 py-3 text-center text-sm font-medium ${
                            kd >= 1.2 ? 'text-green-600 dark:text-green-400' :
                            kd >= 0.9 ? 'text-gray-900 dark:text-white' :
                            'text-red-600 dark:text-red-400'
                          }`}>
                            {kd.toFixed(2)}
                          </td>
                          <td className="px-4 py-3 text-center text-sm text-gray-900 dark:text-white">
                            {match.damage_dealt ? `${(match.damage_dealt / 1000).toFixed(1)}k` : '-'}
                          </td>
                          <td className="px-4 py-3 text-center text-sm text-gray-900 dark:text-white">
                            {match.healing_done ? `${(match.healing_done / 1000).toFixed(1)}k` : '-'}
                          </td>
                          <td className="px-4 py-3 text-center text-sm text-gray-900 dark:text-white">
                            {match.damage_blocked ? `${(match.damage_blocked / 1000).toFixed(1)}k` : '-'}
                          </td>
                        </tr>
                      );
                    })}
                  </tbody>
                </table>
              </div>
            ) : (
              <div className="text-center py-8">
                <p className="text-gray-500 dark:text-gray-500">No match data available</p>
              </div>
            )}
          </div>

          {/* Match History Section - VLR.gg Style */}
          <div className="card p-6">
            <h3 className="text-lg font-semibold text-red-600 dark:text-red-400 mb-4">Recent Matches</h3>
            {matchHistory.length > 0 ? (
              <div className="space-y-3">
                {matchHistory.slice(0, 10).map((match, index) => (
                  <div 
                    key={index}
                    onClick={() => navigateTo('match-detail', { id: match.match_id || match.id })}
                    className="flex items-center justify-between p-4 bg-gray-50 dark:bg-gray-800 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-700 cursor-pointer transition-colors"
                  >
                    <div className="flex items-center space-x-4 flex-1">
                      {/* Event Logo */}
                      {match.event_logo && (
                        <img 
                          src={match.event_logo} 
                          alt={match.event_name}
                          className="w-10 h-10 rounded"
                        />
                      )}
                      
                      {/* Teams and Score */}
                      <div className="flex-1">
                        <div className="flex items-center space-x-3">
                          <TeamLogo team={player.currentTeam} size="small" className="w-6 h-6" />
                          <span className="font-medium text-gray-900 dark:text-white">
                            {player.currentTeam?.name || 'Team'}
                          </span>
                          <span className={`font-bold text-lg ${
                            match.result === 'win' ? 'text-green-600' : 'text-red-600'
                          }`}>
                            {match.team_score || 0}
                          </span>
                          <span className="text-gray-500">-</span>
                          <span className={`font-bold text-lg ${
                            match.result === 'loss' ? 'text-green-600' : 'text-red-600'
                          }`}>
                            {match.opponent_score || 0}
                          </span>
                          <span className="font-medium text-gray-900 dark:text-white">
                            {match.opponent_team?.name || 'TBD'}
                          </span>
                          <TeamLogo team={match.opponent_team} size="small" className="w-6 h-6" />
                        </div>
                        <div className="text-sm text-gray-500 dark:text-gray-400 mt-1">
                          {match.event_name} • {new Date(match.date || match.created_at).toLocaleDateString()}
                        </div>
                      </div>
                    </div>
                    
                    {/* Player Performance */}
                    <div className="text-right">
                      <div className="text-sm font-medium text-gray-900 dark:text-white">
                        {match.eliminations || 0}/{match.deaths || 0}/{match.assists || 0}
                      </div>
                      <div className="text-xs text-gray-500">
                        {match.hero_played || player.mainHero}
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            ) : (
              <div className="text-center py-8">
                <p className="text-gray-500 dark:text-gray-500">No recent matches</p>
              </div>
            )}
          </div>

          {/* Team History */}
          {player.teamHistory && player.teamHistory.length > 0 && (
            <div className="card p-6">
              <h3 className="text-lg font-semibold text-red-600 dark:text-red-400 mb-4">Team History</h3>
              <div className="space-y-3">
                {player.teamHistory.map((team, index) => (
                  <div key={index} className="flex items-center justify-between py-3 border-b border-gray-100 dark:border-gray-800 last:border-0">
                    <button
                      onClick={() => navigateTo('team-detail', { id: team.id })}
                      className="flex items-center space-x-3 hover:opacity-80"
                    >
                      <TeamLogo team={team} size="small" className="w-10 h-10" />
                      <div className="text-left">
                        <div className="font-medium text-gray-900 dark:text-white">{team.name}</div>
                        <div className="text-sm text-gray-500 dark:text-gray-500">{team.region}</div>
                      </div>
                    </button>
                    <div className="text-sm text-gray-600 dark:text-gray-400">
                      {team.join_date && team.leave_date ? (
                        <span>{new Date(team.join_date).getFullYear()} - {new Date(team.leave_date).getFullYear()}</span>
                      ) : team.join_date ? (
                        <span>Since {new Date(team.join_date).getFullYear()}</span>
                      ) : (
                        <span>Previous Team</span>
                      )}
                    </div>
                  </div>
                ))}
              </div>
            </div>
          )}
        </div>

        {/* Sidebar - Fixed Order: Mentions First, Then Achievements */}
        <div className="space-y-6">
          {/* Mentions Section */}
          <div className="card p-6">
            <MentionsSection 
              entityType="player"
              entityId={playerId}
              entityName={player.username}
              title="Recent Mentions"
            />
          </div>
          
          {/* Achievements Section */}
          {player.achievements && player.achievements.length > 0 && (
            <div className="card p-6">
              <h3 className="text-lg font-semibold text-red-600 dark:text-red-400 mb-4">Achievements</h3>
              <div className="space-y-4">
                {player.achievements.map((achievement, index) => (
                  <div key={index} className="p-3 bg-gray-50 dark:bg-gray-800 rounded-lg">
                    <div className="flex items-center space-x-3 mb-2">
                      {achievement.event_logo && (
                        <div className="w-8 h-8 rounded overflow-hidden flex-shrink-0">
                          <img 
                            src={achievement.event_logo} 
                            alt={achievement.event_name}
                            className="w-full h-full object-cover"
                          />
                        </div>
                      )}
                      <div className={`text-lg font-bold ${
                        achievement.placement === 1 ? 'text-yellow-500' :
                        achievement.placement === 2 ? 'text-gray-400' :
                        achievement.placement === 3 ? 'text-orange-600' :
                        'text-gray-600 dark:text-gray-400'
                      }`}>
                        #{achievement.placement}
                      </div>
                    </div>
                    <div className="font-semibold text-gray-900 dark:text-white text-sm">
                      {achievement.event_name}
                    </div>
                    <div className="text-xs text-gray-600 dark:text-gray-400 mt-1">
                      {achievement.date && new Date(achievement.date).toLocaleDateString()}
                    </div>
                    {achievement.prize && (
                      <div className="text-green-600 dark:text-green-400 font-semibold text-sm mt-1">
                        ${achievement.prize.toLocaleString()}
                      </div>
                    )}
                  </div>
                ))}
              </div>
            </div>
          )}

          {/* REMOVED: Hero Pool section completely */}
          {/* REMOVED: Career Stats section completely */

          {/* Biography */}
          {player.biography && (
            <div className="card p-6">
              <h3 className="text-lg font-semibold text-red-600 dark:text-red-400 mb-4">Biography</h3>
              <div 
                className="text-gray-600 dark:text-gray-300 text-sm leading-relaxed"
                dangerouslySetInnerHTML={{ __html: parseTextWithMentions(player.biography) }}
              />
            </div>
          )}
        </div>
      </div>

    </div>
  );
}

export default PlayerDetailPage;