;
function TournamentBracketVisualization({ tournamentSlug, navigateTo, isAdmin, onMatchUpdate }) {;
;
  // Fetch tournament data;
  useEffect(() => {;
    const fetchTournament = async () => {;
      try {;
        ;
        if (response.ok) {;
          // Set active stage based on tournament progress;
          if (data.tournament.status === 'completed') {;
          } else {;
            if (activeStage) {;
            };
          };
        } else {;
        };
      } catch (err) {;
      } finally {;
      };
;
    if (tournamentSlug) {;
    };
;
  // Handle fullscreen;
  const toggleFullscreen = () => {;
    if (!document.fullscreenElement) {;
    } else {;
    };
;
  // Handle zoom;
  const handleZoom = (delta) => {;
;
  if (loading) {;
    return (;
      <div className="flex items-center justify-center h-64">;
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>;
      </div>;
  };
;
  if (error || !tournament) {;
    return (;
      <div className="text-center py-12">;
        <div className="text-red-500">{error || 'Tournament not found'}</div>;
      </div>;
  };
;
;
  return (;
    <div ref={containerRef} className={`tournament-bracket-container ${isFullscreen ? 'fullscreen' : ''} bg-white dark:bg-gray-900`}>;
      {/* Header */};
      <div className="bracket-header bg-gray-50 dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700 p-4">;
        <div className="flex items-center justify-between">;
          <div>;
            <h2 className="text-2xl font-bold text-gray-900 dark:text-white">;
              {tournament.name};
            </h2>;
            <div className="flex items-center space-x-4 mt-1">;
              <span className="text-sm text-gray-500 dark:text-gray-400">;
                {tournament.region} â€¢ {tournament.team_count} Teams;
              </span>;
              {tournament.prize_pool && (;
                <span className="text-sm font-medium text-green-600 dark:text-green-400">;
                  ${tournament.prize_pool.toLocaleString()} Prize Pool;
                </span>;
              )};
              <span className={`text-sm px-2 py-1 rounded ${;
                tournament.status === 'completed' ? 'bg-gray-200 text-gray-700' :;
                tournament.status === 'ongoing' ? 'bg-green-100 text-green-700' :;
                'bg-blue-100 text-blue-700';
              }`}>;
                {tournament.status.charAt(0).toUpperCase() + tournament.status.slice(1)};
              </span>;
            </div>;
          </div>;
;
          <div className="flex items-center space-x-2">;
            <button;
              onClick={() => handleZoom(-0.1)};
              className="p-2 text-gray-600 hover:text-gray-900 dark:text-gray-400 dark:hover:text-white";
              title="Zoom Out";
            >;
              <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">;
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M20 12H4" />;
              </svg>;
            </button>;
            <span className="text-sm text-gray-600 dark:text-gray-400">{Math.round(zoom * 100)}%</span>;
            <button;
              onClick={() => handleZoom(0.1)};
              className="p-2 text-gray-600 hover:text-gray-900 dark:text-gray-400 dark:hover:text-white";
              title="Zoom In";
            >;
              <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">;
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4v16m8-8H4" />;
              </svg>;
            </button>;
            ;
            <button;
              onClick={toggleFullscreen};
              className="p-2 text-gray-600 hover:text-gray-900 dark:text-gray-400 dark:hover:text-white ml-2";
              title="Fullscreen";
            >;
              <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">;
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} ;
                  d="M4 8V4m0 0h4M4 4l5 5m11-5h-4m4 0v4m0-4l-5 5M4 16v4m0 0h4m-4 0l5-5m11 5h-4m4 0v-4m0 4l-5-5" ;
                />;
              </svg>;
            </button>;
          </div>;
        </div>;
;
        {/* Stage Tabs */};
        {isSwissDoubleElim && (;
          <div className="flex space-x-1 mt-4">;
            {swissStage && (;
              <button;
                onClick={() => setActiveStage('swiss')};
                className={`px-4 py-2 text-sm font-medium rounded-t ${;
                  activeStage === 'swiss';
                    ? 'bg-white dark:bg-gray-900 text-blue-600 dark:text-blue-400 border-t border-l border-r border-gray-200 dark:border-gray-700';
                    : 'bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-400 hover:bg-gray-200 dark:hover:bg-gray-700';
                }`};
              >;
                Swiss Stage;
              </button>;
            )};
            <button;
              onClick={() => setActiveStage('double_elim')};
              className={`px-4 py-2 text-sm font-medium rounded-t ${;
                activeStage === 'double_elim';
                  ? 'bg-white dark:bg-gray-900 text-blue-600 dark:text-blue-400 border-t border-l border-r border-gray-200 dark:border-gray-700';
                  : 'bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-400 hover:bg-gray-200 dark:hover:bg-gray-700';
              }`};
            >;
              Double Elimination;
            </button>;
          </div>;
        )};
      </div>;
;
      {/* Content */};
      <div className="bracket-content p-4 overflow-auto" style={{ transform: `scale(${zoom})`, transformOrigin: 'top left' }}>;
        {activeStage === 'swiss' && swissStage ? (;
          <SwissStageView ;
            tournament={tournament};
            stage={swissStage};
            navigateTo={navigateTo};
            isAdmin={isAdmin};
            onMatchUpdate={onMatchUpdate};
          />;
        ) : (;
          <DoubleEliminationView;
            tournament={tournament};
            upperBracket={upperBracket};
            lowerBracket={lowerBracket};
            grandFinal={grandFinal};
            navigateTo={navigateTo};
            isAdmin={isAdmin};
            onMatchUpdate={onMatchUpdate};
          />;
        )};
      </div>;
    </div>;
};
;
// Swiss Stage View Component;
function SwissStageView({ tournament, stage, navigateTo, isAdmin, onMatchUpdate }) {;
  // Group matches by round;
  const matchesByRound = stage.matches.reduce((acc, match) => {;
    if (!acc[match.round_number]) {;
    };
;
  // Get Swiss standings;
  const standings = tournament.teams.sort((a, b) => {;
    if (b.pivot.swiss_score !== a.pivot.swiss_score) {;
    };
    if (b.pivot.swiss_wins !== a.pivot.swiss_wins) {;
    };
;
  return (;
    <div className="swiss-stage">;
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">;
        {/* Standings */};
        <div className="lg:col-span-1">;
          <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-4">Swiss Standings</h3>;
          <div className="bg-gray-50 dark:bg-gray-800 rounded-lg p-4">;
            <div className="space-y-2">;
              {standings.map((team, index) => (;
                <div;
                  key={team.id};
                  className={`flex items-center justify-between p-2 rounded ${;
                    index < 4 ;
                      ? 'bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800';
                      : 'bg-gray-100 dark:bg-gray-700';
                  }`};
                >;
                  <div className="flex items-center space-x-2">;
                    <span className="text-sm font-medium text-gray-500 dark:text-gray-400 w-6">;
                      {index + 1}.;
                    </span>;
                    <TeamLogo team={team} size="w-6 h-6" />;
                    <span className={`text-sm font-medium ${;
                      index < 4 ? 'text-green-700 dark:text-green-300' : 'text-gray-700 dark:text-gray-300';
                    }`}>;
                      {team.name};
                    </span>;
                  </div>;
                  <div className="flex items-center space-x-3">;
                    <span className="text-sm text-gray-600 dark:text-gray-400">;
                      {team.pivot.swiss_wins}-{team.pivot.swiss_losses};
                    </span>;
                    <span className="text-sm font-bold text-gray-900 dark:text-white">;
                      {team.pivot.swiss_score};
                    </span>;
                  </div>;
                </div>;
              ))};
            </div>;
            <div className="mt-4 pt-4 border-t border-gray-200 dark:border-gray-700">;
              <p className="text-xs text-gray-500 dark:text-gray-400">;
                Top 4 teams advance to Upper Bracket;
              </p>;
              <p className="text-xs text-gray-500 dark:text-gray-400">;
                Bottom 4 teams advance to Lower Bracket;
              </p>;
            </div>;
          </div>;
        </div>;
;
        {/* Matches by Round */};
        <div className="lg:col-span-2">;
          <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-4">Swiss Matches</h3>;
          <div className="space-y-6">;
            {Object.entries(matchesByRound).map(([round, matches]) => (;
              <div key={round}>;
                <h4 className="text-sm font-medium text-gray-600 dark:text-gray-400 mb-2">;
                  Round {round};
                </h4>;
                <div className="grid grid-cols-1 md:grid-cols-2 gap-3">;
                  {matches.map(match => (;
                    <SwissMatch;
                      key={match.id};
                      match={match};
                      navigateTo={navigateTo};
                      isAdmin={isAdmin};
                      onMatchUpdate={onMatchUpdate};
                    />;
                  ))};
                </div>;
              </div>;
            ))};
          </div>;
        </div>;
      </div>;
    </div>;
};
;
// Swiss Match Component;
function SwissMatch({ match, navigateTo, isAdmin, onMatchUpdate }) {;
;
  return (;
    <div;
      className={`bg-white dark:bg-gray-800 rounded border transition-all ${;
        isLive ;
          ? 'border-green-500 shadow-sm' ;
          : 'border-gray-200 dark:border-gray-700 hover:border-gray-300 dark:hover:border-gray-600';
      } ${match.id ? 'cursor-pointer' : ''}`};
      onClick={() => match.id && navigateTo && navigateTo('match-detail', { id: match.id })};
    >;
      {/* Match Header */};
      <div className="px-3 py-2 bg-gray-50 dark:bg-gray-700 border-b border-gray-200 dark:border-gray-600 flex items-center justify-between">;
        <span className="text-xs text-gray-500 dark:text-gray-400">;
          Best of {match.best_of};
        </span>;
        {isLive && (;
          <div className="flex items-center">;
            <span className="relative flex h-2 w-2 mr-1">;
              <span className="animate-ping absolute inline-flex h-full w-full rounded-full bg-green-400 opacity-75"></span>;
              <span className="relative inline-flex rounded-full h-2 w-2 bg-green-500"></span>;
            </span>;
            <span className="text-xs font-medium text-green-600 dark:text-green-400">LIVE</span>;
          </div>;
        )};
        {match.scheduled_at && !isCompleted && !isLive && (;
          <span className="text-xs text-gray-500 dark:text-gray-400">;
            {new Date(match.scheduled_at).toLocaleTimeString('en-US', {;
              hour: '2-digit',;
              minute: '2-digit';
            })};
          </span>;
        )};
      </div>;
;
      {/* Teams */};
      <div className="divide-y divide-gray-200 dark:divide-gray-700">;
        <div className={`flex items-center justify-between p-3 ${;
          team1Won ? 'bg-green-50 dark:bg-green-900/20' : '';
        }`}>;
          <div className="flex items-center space-x-2">;
            <TeamLogo team={match.team1} size="w-5 h-5" />;
            <span className={`text-sm ${;
              team1Won ? 'font-semibold text-gray-900 dark:text-white' : 'text-gray-700 dark:text-gray-300';
            }`}>;
              {match.team1?.name || 'TBD'};
            </span>;
          </div>;
          <span className={`text-sm font-bold ${;
            team1Won ? 'text-gray-900 dark:text-white' : 'text-gray-500 dark:text-gray-400';
          }`}>;
            {match.team1_score !== null ? match.team1_score : '-'};
          </span>;
        </div>;
;
        <div className={`flex items-center justify-between p-3 ${;
          team2Won ? 'bg-green-50 dark:bg-green-900/20' : '';
        }`}>;
          <div className="flex items-center space-x-2">;
            <TeamLogo team={match.team2} size="w-5 h-5" />;
            <span className={`text-sm ${;
              team2Won ? 'font-semibold text-gray-900 dark:text-white' : 'text-gray-700 dark:text-gray-300';
            }`}>;
              {match.team2?.name || 'TBD'};
            </span>;
          </div>;
          <span className={`text-sm font-bold ${;
            team2Won ? 'text-gray-900 dark:text-white' : 'text-gray-500 dark:text-gray-400';
          }`}>;
            {match.team2_score !== null ? match.team2_score : '-'};
          </span>;
        </div>;
      </div>;
    </div>;
};
;
// Double Elimination View Component;
function DoubleEliminationView({ tournament, upperBracket, lowerBracket, grandFinal, navigateTo, isAdmin, onMatchUpdate }) {;
  // Group matches by round for each bracket;
  const getMatchesByRound = (stage) => {;
    return stage.matches.reduce((acc, match) => {;
      if (!acc[match.round_number]) {;
      };
;
;
  return (;
    <div className="double-elimination-view">;
      {/* Upper Bracket */};
      {upperBracket && (;
        <div className="mb-12">;
          <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-6">Upper Bracket</h3>;
          <div className="flex items-start space-x-8">;
            {Object.entries(upperMatches).map(([round, matches]) => (;
              <BracketRound;
                key={`upper-${round}`};
                roundNumber={round};
                matches={matches};
                isUpperBracket={true};
                totalRounds={Object.keys(upperMatches).length};
                navigateTo={navigateTo};
                isAdmin={isAdmin};
                onMatchUpdate={onMatchUpdate};
              />;
            ))};
          </div>;
        </div>;
      )};
;
      {/* Lower Bracket */};
      {lowerBracket && (;
        <div className="mb-12">;
          <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-6">Lower Bracket</h3>;
          <div className="flex items-start space-x-8">;
            {Object.entries(lowerMatches).map(([round, matches]) => (;
              <BracketRound;
                key={`lower-${round}`};
                roundNumber={round};
                matches={matches};
                isUpperBracket={false};
                totalRounds={Object.keys(lowerMatches).length};
                navigateTo={navigateTo};
                isAdmin={isAdmin};
                onMatchUpdate={onMatchUpdate};
              />;
            ))};
          </div>;
        </div>;
      )};
;
      {/* Grand Final */};
      {grandFinalMatch && (;
        <div>;
          <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-6">Grand Final</h3>;
          <div className="max-w-sm">;
            <BracketMatch;
              match={grandFinalMatch};
              isGrandFinal={true};
              navigateTo={navigateTo};
              isAdmin={isAdmin};
              onMatchUpdate={onMatchUpdate};
            />;
          </div>;
        </div>;
      )};
    </div>;
};
;
// Bracket Round Component;
function BracketRound({ roundNumber, matches, isUpperBracket, totalRounds, navigateTo, isAdmin, onMatchUpdate }) {;
  const getRoundName = () => {;
    if (isUpperBracket) {;
    } else {;
    };
;
  return (;
    <div className="bracket-round">;
      <h4 className="text-sm font-medium text-gray-600 dark:text-gray-400 mb-4">;
        {getRoundName()};
      </h4>;
      <div className="space-y-8">;
        {matches.map((match, index) => (;
          <div key={match.id} className="relative">;
            <BracketMatch;
              match={match};
              navigateTo={navigateTo};
              isAdmin={isAdmin};
              onMatchUpdate={onMatchUpdate};
            />;
            ;
            {/* Connector lines */};
            {roundNumber < totalRounds && (;
              <div className="absolute left-full top-1/2 transform -translate-y-1/2">;
                <svg width="40" height="2" className="overflow-visible">;
                  <line;
                    x1="0";
                    y1="1";
                    x2="40";
                    y2="1";
                    stroke="#e5e7eb";
                    strokeWidth="2";
                  />;
                </svg>;
              </div>;
            )};
          </div>;
        ))};
      </div>;
    </div>;
};
;
// Bracket Match Component;
function BracketMatch({ match, isGrandFinal, navigateTo, isAdmin, onMatchUpdate }) {;
;
  const handleUpdate = async (updates) => {;
    ;
    try {;
      const response = await fetch(`/api/admin/tournaments/matches/${match.match_id}`, {;
        method: 'PUT',;
        headers: {;
          'Content-Type': 'application/json',;
          'Authorization': `Bearer ${localStorage.getItem('token')}`;
        },;
        body: JSON.stringify(updates);
      ;
      if (response.ok) {;
      };
    } catch (error) {;
    };
;
  return (;
    <div;
      className={`bracket-match bg-white dark:bg-gray-800 rounded-lg border transition-all ${;
        isLive ;
          ? 'border-green-500 shadow-md' ;
          : 'border-gray-300 dark:border-gray-600 hover:border-gray-400 dark:hover:border-gray-500 hover:shadow-sm';
      } ${isGrandFinal ? 'ring-2 ring-yellow-400' : ''} ${match.id ? 'cursor-pointer' : ''}`};
      onClick={() => match.id && navigateTo && navigateTo('match-detail', { id: match.id })};
      style={{ width: '220px' }};
    >;
      {/* Match Header */};
      <div className="px-3 py-2 bg-gray-50 dark:bg-gray-700 border-b border-gray-200 dark:border-gray-600 flex items-center justify-between rounded-t-lg">;
        <div className="flex items-center space-x-2">;
          <span className="text-xs font-medium text-gray-600 dark:text-gray-400">;
            {match.match_id};
          </span>;
          {isGrandFinal && (;
            <span className="text-xs px-2 py-0.5 bg-yellow-100 text-yellow-800 rounded">;
              Bo{match.best_of};
            </span>;
          )};
        </div>;
        {isLive && (;
          <div className="flex items-center">;
            <span className="relative flex h-2 w-2 mr-1">;
              <span className="animate-ping absolute inline-flex h-full w-full rounded-full bg-green-400 opacity-75"></span>;
              <span className="relative inline-flex rounded-full h-2 w-2 bg-green-500"></span>;
            </span>;
            <span className="text-xs font-medium text-green-600 dark:text-green-400">LIVE</span>;
          </div>;
        )};
      </div>;
;
      {/* Teams */};
      <div className="divide-y divide-gray-200 dark:divide-gray-700">;
        <MatchTeamRow;
          team={match.team1};
          teamSource={match.team1_source};
          score={match.team1_score};
          isWinner={team1Won};
          isAdmin={isAdmin};
          onScoreUpdate={(score) => handleUpdate({ team1_score: score })};
        />;
        <MatchTeamRow;
          team={match.team2};
          teamSource={match.team2_source};
          score={match.team2_score};
          isWinner={team2Won};
          isAdmin={isAdmin};
          onScoreUpdate={(score) => handleUpdate({ team2_score: score })};
        />;
      </div>;
;
      {/* Match Footer */};
      {(match.scheduled_at || match.vods) && (;
        <div className="px-3 py-2 bg-gray-50 dark:bg-gray-700 border-t border-gray-200 dark:border-gray-600 rounded-b-lg">;
          {match.scheduled_at && !isCompleted && !isLive && (;
            <span className="text-xs text-gray-500 dark:text-gray-400">;
              {new Date(match.scheduled_at).toLocaleString('en-US', {;
                month: 'short',;
                day: 'numeric',;
                hour: '2-digit',;
                minute: '2-digit';
              })};
            </span>;
          )};
          {match.vods && Array.isArray(match.vods) && match.vods.length > 0 && (;
            <a;
              href={match.vods[0]};
              target="_blank";
              rel="noopener noreferrer";
              className="text-xs text-blue-600 hover:text-blue-700 dark:text-blue-400 dark:hover:text-blue-300";
              onClick={(e) => e.stopPropagation()};
            >;
              Watch VOD â†’;
            </a>;
          )};
        </div>;
      )};
    </div>;
};
;
// Match Team Row Component;
function MatchTeamRow({ team, teamSource, score, isWinner, isAdmin, onScoreUpdate }) {;
;
  const handleScoreSubmit = () => {;
;
  return (;
    <div className={`flex items-center justify-between p-3 ${;
      isWinner ? 'bg-green-50 dark:bg-green-900/20' : '';
    }`}>;
      <div className="flex items-center space-x-2 flex-1 min-w-0">;
        {team ? (;
          <>;
            <TeamLogo team={team} size="w-5 h-5" />;
            <span className={`text-sm truncate ${;
              isWinner ? 'font-semibold text-gray-900 dark:text-white' : 'text-gray-700 dark:text-gray-300';
            }`}>;
              {team.name};
            </span>;
          </>;
        ) : (;
          <span className="text-xs text-gray-400 dark:text-gray-500 italic">;
            {teamSource || 'TBD'};
          </span>;
        )};
      </div>;
      ;
      <div className="ml-2">;
        {isAdmin && editingScore ? (;
          <input;
            type="number";
            value={tempScore};
            onChange={(e) => setTempScore(parseInt(e.target.value) || 0)};
            onBlur={handleScoreSubmit};
            onKeyPress={(e) => e.key === 'Enter' && handleScoreSubmit()};
            className="w-12 px-1 py-0.5 text-sm text-center border rounded";
            onClick={(e) => e.stopPropagation()};
            autoFocus;
          />;
        ) : (;
          <span;
            className={`text-sm font-bold ${;
              isWinner ? 'text-gray-900 dark:text-white' : 'text-gray-500 dark:text-gray-400';
            } ${isAdmin ? 'cursor-pointer hover:bg-gray-200 dark:hover:bg-gray-700 px-2 py-1 rounded' : ''}`};
            onClick={(e) => {;
              if (isAdmin) {;
              };
            }};
          >;
            {score !== null && score !== undefined ? score : '-'};
          </span>;
        )};
      </div>;
    </div>;
};
;
