;
/**;
 * Hook to handle live profile updates via WebSocket;
 * @param {number|string} userId - The user ID to watch for updates;
 * @param {function} onUpdate - Callback when profile is updated;
 * @param {object} options - Options for the hook;
 */;
export const useLiveProfileUpdates = (userId, onUpdate, options = {}) => {;
  const { ;
    watchPublicChannel = true, ;
    watchPrivateChannel = true,;
    updateTypes = ['profile', 'activity', 'stats'];
;
  const handleProfileUpdate = useCallback((data) => {;
    // Check if this update is for the user we're watching;
    if (data.user_id === parseInt(userId)) {;
      // Only process updates of the types we're interested in;
      if (updateTypes.includes(data.update_type)) {;
      };
    };
;
  useEffect(() => {;
;
;
    // Subscribe to public profile updates channel;
    if (watchPublicChannel) {;
    };
;
    // Subscribe to private user channel (for sensitive updates);
    if (watchPrivateChannel) {;
      channels.push(;
        { channel: privateChannel, event: 'profile.updated' },;
        { channel: privateChannel, event: 'activity.created' },;
        { channel: privateChannel, event: 'stats.updated' };
    };
;
    // Cleanup function;
    return () => {;
      channels.forEach(({ channel, event }) => {;
      ;
      if (watchPublicChannel) {;
      };
      if (watchPrivateChannel) {;
      };
;
/**;
 * Hook to handle live activity updates;
 * @param {number|string} userId - The user ID to watch for updates;
 * @param {function} onNewActivity - Callback when new activity is created;
 */;
export const useLiveActivityUpdates = (userId, onNewActivity) => {;
  const handleActivityUpdate = useCallback((data) => {;
    if (data.user_id === parseInt(userId) && data.activity) {;
    };
;
  useEffect(() => {;
;
;
    return () => {;
;
/**;
 * Hook to handle live stats updates;
 * @param {number|string} userId - The user ID to watch for updates;
 * @param {function} onStatsUpdate - Callback when stats are updated;
 */;
export const useLiveStatsUpdates = (userId, onStatsUpdate) => {;
  const handleStatsUpdate = useCallback((data) => {;
    if (data.user_id === parseInt(userId) && data.stats) {;
    };
;
  useEffect(() => {;
;
;
    return () => {;
;
